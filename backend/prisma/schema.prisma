// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User needs: a unique name, an avatar, 2FA, a friendlist, a match history, stats
// Will add more as we progress
enum Status {
  ONLINE
  OFFLINE
  INGAME
}

model User {
  id              Int             @id @default(autoincrement())
  username        String          @unique
  password        String
  email           String?         @unique
  avatar          String          @default("./uploads/default.png")
  oauth_code      String?         @unique
  oauth_exp       DateTime?
  twoFactorSecret String?
  twoFactorStatus Boolean         @default(false)
  twoFactorOtpUrl String?
  userStatus      Status          @default(OFFLINE)
  friendRequest   FriendRequest[]
  friendList      Int[]           @default([])
  blockedList     BlockedUser[]
  channelList     Int[]           @default([])
  player1Games    Game[]          @relation("Player1")
  player2Games    Game[]          @relation("Player2")
  stats           Stats?
  achievements    Achievement[]
  createdAt       DateTime        @default(now())
}

model Stats {
  User          User @relation(fields: [userId], references: [id])
  userId        Int
  matchesPlayed Int  @default(0)
  matchesWon    Int  @default(0)
  matchesLost   Int  @default(0)
  eloRating     Int  @default(1000)
  winStreak     Int  @default(0)
  lossStreak    Int  @default(0)
  goalsScored   Int  @default(0)
  goalsTaken    Int  @default(0)

  @@id([userId])
}

model Achievement {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
}

model BlockedUser {
  id        Int      @id @default(autoincrement())
  blockedBy Int
  User      User     @relation(fields: [blockedBy], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  sendBy    Int
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// For a Channel, we need an enum type representing the privacy of the channel (public, private, protected), a channel owner, one or more channel administrator, 
// a ban list, a mute list. Might be used for private messages too, like PRIVMSG in ft_irc?

enum ChannelType {
  PUBLIC
  PRIVATE
  PROTECTED
  WHISPER
}

model Channel {
  id             Int         @id @default(autoincrement())
  name           String?
  password       String?
  messages       Message[]
  ownerId        Int
  administrators Int[]       @default([])
  members        Int[]       @default([])
  banList        Int[]       @default([])
  muteList       MutedUser[]
  type           ChannelType
  createdAt      DateTime    @default(now())
}

model MutedUser {
  id        Int      @id @default(autoincrement())
  userId    Int
  duration  DateTime
  Channel   Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int?
}

enum MessageType {
  MESSAGE
  INVITE
  NOTIF
}

model Message {
  id        Int         @id @default(autoincrement())
  sendBy    Int?
  content   String
  type      MessageType @default(MESSAGE)
  Channel   Channel?    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int?
  createdAt DateTime    @default(now())
}

enum GameStatus {
  MATCHMAKING
  INVITE
  ONGOING
  FINISHED
}

//Those are just example just to pave the way
enum GameType {
  CLASSIC
  SPEEDUP
  HARDMODE
}

// For a Game, need at least the ID of the two players involved, the score, if the match is ongoing or over. Will add more.
model Game {
  id Int @id @default(autoincrement())

  player1      User? @relation("Player1", fields: [player1Id], references: [id])
  player1Id    Int?
  player1Score Int   @default(0)

  player2      User? @relation("Player2", fields: [player2Id], references: [id])
  player2Id    Int?
  player2Score Int   @default(0)

  wonBy Int?

  status   GameStatus
  gametype GameType   @default(CLASSIC)

  createdAt DateTime @default(now())
}
